
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "dscore"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('dscore')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("builtin_itembank")
> ### * builtin_itembank
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: builtin_itembank
> ### Title: Built-in itembank
> ### Aliases: builtin_itembank
> ### Keywords: datasets
> 
> ### ** Examples
> 
> head(builtin_itembank)
    key      item  tau instrument domain mode number
1 dutch ddicmm029  1.7        ddi     cm    m    029
2 dutch ddicmm030 11.3        ddi     cm    m    030
3 dutch ddicmm031 14.5        ddi     cm    m    031
4 dutch ddicmm033 36.0        ddi     cm    m    033
5 dutch ddicmm034 40.9        ddi     cm    m    034
6 dutch ddicmm036 43.1        ddi     cm    m    036
                                    label
1                   Reacts when spoken to
2 Smiles in response (M; can ask parents)
3                   vocalizes in response
4                   Says dada, baba, gaga
5                   Babbles while playing
6    Waves 'bye-bye' (M; can ask parents)
> 
> 
> 
> cleanEx()
> nameEx("builtin_references")
> ### * builtin_references
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: builtin_references
> ### Title: Age-conditional reference distribution of D-score
> ### Aliases: builtin_references
> ### Keywords: datasets
> 
> ### ** Examples
> 
> head(builtin_references)
    pop    age    mu  sigma     nu   P3   P10   P25   P50   P75   P90   P97
1 dutch 0.0383  8.81 0.3126 1.3917 3.15  5.07  6.91  8.81 10.57 12.07 13.49
2 dutch 0.0575 10.59 0.2801 1.4418 4.32  6.49  8.52 10.59 12.50 14.12 15.64
3 dutch 0.0767 12.27 0.2526 1.4891 5.61  7.96 10.10 12.27 14.28 15.97 17.56
4 dutch 0.0958 13.87 0.2291 1.5331 6.99  9.43 11.64 13.87 15.93 17.67 19.30
5 dutch 0.1150 15.39 0.2089 1.5722 8.42 10.89 13.13 15.39 17.47 19.23 20.89
6 dutch 0.1342 16.83 0.1916 1.6049 9.86 12.32 14.56 16.83 18.92 20.69 22.36
  SDM2  SDM1   SD0  SDP1  SDP2
1 2.78  5.94  8.81 11.39 13.76
2 3.88  7.46 10.59 13.38 15.94
3 5.12  8.98 12.27 15.20 17.87
4 6.47 10.48 13.87 16.87 19.61
5 7.89 11.95 15.39 18.43 21.21
6 9.33 13.39 16.83 19.88 22.68
> 
> 
> 
> cleanEx()
> nameEx("count_mu_dutch")
> ### * count_mu_dutch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count_mu_dutch
> ### Title: Median of Dutch references
> ### Aliases: count_mu_dutch
> 
> ### ** Examples
> 
> dscore:::count_mu_dutch(0:2)
[1]  4.88220 48.90290 63.83718
> 
> 
> 
> cleanEx()
> nameEx("count_mu_gcdg")
> ### * count_mu_gcdg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count_mu_gcdg
> ### Title: Median of gcdg references
> ### Aliases: count_mu_gcdg
> 
> ### ** Examples
> 
> dscore:::count_mu_gcdg(0:2)
[1]  3.308477 49.244553 62.480171
> 
> 
> 
> cleanEx()
> nameEx("daz")
> ### * daz
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: daz
> ### Title: D-score standard deviation score: DAZ
> ### Aliases: daz zad
> 
> ### ** Examples
> 
> # using gcdg-reference
> daz(d = c(35, 50), x = c(0.5, 1.0))
   0.5      1 
-0.425  0.299 
> 
> # using Dutch reference
> daz(d = c(35, 50), x = c(0.5, 1.0), reference = get_reference("dutch"))
   0.5      1 
-0.091  0.357 
> # population median at ages 0.5, 1 and 2 years, gcdg reference
> zad(z = rep(0, 3), x = c(0.5, 1, 2))
  0.5     1     2 
36.32 49.11 62.67 
> 
> # population median at ages 0.5, 1 and 2 years, dutch reference
> zad(z = rep(0, 3), x = c(0.5, 1, 2), reference = get_reference("dutch"))
  0.5     1     2 
35.27 48.91 63.77 
> 
> # percentiles of D-score reference
> g <- expand.grid(age = seq(0.1, 2, 0.1), p = c(0.1, 0.5, 0.9))
> d <- zad(z = qnorm(g$p), x = g$age)
> matplot(
+   x = matrix(g$age, ncol = 3), y = matrix(d, ncol = 3), type = "l",
+   lty = 1, col = "blue", xlab = "Age (years)", ylab = "D-score"
+ )
> 
> 
> 
> cleanEx()
> nameEx("decompose_itemnames")
> ### * decompose_itemnames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: decompose_itemnames
> ### Title: Decomposes item names into their four components
> ### Aliases: decompose_itemnames
> 
> ### ** Examples
> 
> itemnames <- c("aqigmc028", "grihsd219", "", "by1mdd157", "mdsgmd006")
> decompose_itemnames(itemnames)
  instrument domain mode number
1        aqi     gm    c    028
2        gri     hs    d    219
3                              
4        by1     md    d    157
5        mds     gm    d    006
> 
> 
> 
> cleanEx()
> nameEx("dscore")
> ### * dscore
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dscore
> ### Title: D-score estimation
> ### Aliases: dscore dscore_posterior
> 
> ### ** Examples
> 
> data <- data.frame(
+   age = rep(round(21 / 365.25, 4), 10),
+   ddifmd001 = c(NA, NA, 0, 0, 0, 1, 0, 1, 1, 1),
+   ddicmm029 = c(NA, NA, NA, 0, 1, 0, 1, 0, 1, 1),
+   ddigmd053 = c(NA, 0, 0, 1, 0, 0, 1, 1, 0, 1)
+ )
> items <- names(data)[2:4]
> 
> # third item is not part of default key
> get_tau(items)
ddifmd001 ddicmm029 ddigmd053 
     5.51      2.43        NA 
> 
> # calculate D-score
> dscore(data)
       a n   p      d      sem    daz
1     NA 0  NA     NA       NA     NA
2     NA 0  NA     NA       NA     NA
3  0.058 1 0.0  3.480 2.768018 -2.144
4  0.058 2 0.0  0.969 2.371505 -2.853
5  0.058 2 0.5  4.830 1.882182 -1.763
6  0.058 2 0.5  4.830 1.882182 -1.763
7  0.058 2 0.5  4.830 1.882182 -1.763
8  0.058 2 0.5  4.830 1.882182 -1.763
9  0.058 2 1.0 11.842 3.978551  0.216
10 0.058 2 1.0 11.842 3.978551  0.216
> 
> # calculate full posterior
> p <- dscore_posterior(data)
> 
> # plot posterior for row 7
> plot(x = -10:100, y = p[7, ], type = "l", xlab = "D-score",
+  ylab = "Density", xlim = c(0, 30))
> 
> 
> 
> cleanEx()
> nameEx("get_age_equivalent")
> ### * get_age_equivalent
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_age_equivalent
> ### Title: Get age equivalents of items that have a difficulty estimate
> ### Aliases: get_age_equivalent
> 
> ### ** Examples
> 
> get_age_equivalent(c("ddicmm030", "ddicmm050"), key = "dutch")
[38;5;246m# A tibble: 6 x 4[39m
  item          d   pct       a
  [3m[38;5;246m<chr>[39m[23m     [3m[38;5;246m<dbl>[39m[23m [3m[38;5;246m<dbl>[39m[23m   [3m[38;5;246m<dbl>[39m[23m
[38;5;250m1[39m ddicmm030  9.10    10  0.041[4m5[24m
[38;5;250m2[39m ddicmm030 11.3     50  0.065[4m6[24m
[38;5;250m3[39m ddicmm030 13.5     90  0.091[4m3[24m
[38;5;250m4[39m ddicmm050 67.3     10  2.35  
[38;5;250m5[39m ddicmm050 69.5     50  2.60  
[38;5;250m6[39m ddicmm050 71.7     90 [31mNA[39m     
> 
> 
> 
> cleanEx()
> nameEx("get_itemnames")
> ### * get_itemnames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_itemnames
> ### Title: Extract item names
> ### Aliases: get_itemnames
> 
> ### ** Examples
> 
> itemnames <- c("aqigmc028", "grihsd219", "", "age", "mdsgmd999")
> 
> # filter out impossible names
> get_itemnames(itemnames)
[1] "aqigmc028" "grihsd219" "mdsgmd999"
> get_itemnames(itemnames, strict = TRUE)
[1] "aqigmc028" "grihsd219"
> 
> # only items from specific instruments
> get_itemnames(itemnames, instrument = c("aqi", "mds"))
[1] "aqigmc028" "mdsgmd999"
> get_itemnames(itemnames, instrument = c("aqi", "mds"), strict = TRUE)
[1] "aqigmc028"
> 
> # get all items from the se domain of iyo instrument
> get_itemnames(domain = "se", instrument = "iyo")
 [1] "iyosec001" "iyosec002" "iyosec003" "iyosec004" "iyosec005" "iyosec006"
 [7] "iyosec007" "iyosec008" "iyosec009" "iyosec010" "iyosec011" "iyosec012"
[13] "iyosec013" "iyosec014" "iyosec015" "iyosec016" "iyosec017" "iyosec018"
[19] "iyosec019" "iyosec020"
> 
> # get all item from the se domain with direct assessment mode
> get_itemnames(domain = "se", mode = "d")
 [1] "mdtsed001" "mdtsed002" "mdtsed003" "mdtsed004" "mdtsed005" "mdtsed006"
 [7] "mdtsed007" "mdtsed008" "mdtsed009" "mdtsed010" "mdtsed011" "mdtsed012"
[13] "mdtsed013" "mdtsed014" "mdtsed015" "mdtsed016" "mdtsed017" "mdtsed018"
[19] "mdtsed019" "mdtsed020" "mdtsed021" "mdtsed022" "mdtsed023" "mdtsed024"
[25] "mdtsed025" "mdtsed026" "mdtsed027" "mdtsed028" "mdtsed029" "mdtsed030"
[31] "mdtsed031" "mdtsed032" "mdtsed033" "mdtsed034" "prised001" "prised002"
[37] "prised003" "prised004" "prised005" "prised006" "prised007" "prised008"
[43] "prised009" "prised010" "prised011" "prised012" "prised013" "prised014"
[49] "prised015" "prised016"
> 
> # get all item numbers 70 and 73 from gm domain
> get_itemnames(number = c(70, 73), domain = "gm")
[1] "by3gmd070" "ddigmd070" "ddigmm073" "mulgmd070"
> 
> 
> 
> cleanEx()
> nameEx("get_labels")
> ### * get_labels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_labels
> ### Title: Get labels for items
> ### Aliases: get_labels
> 
> ### ** Examples
> 
> # get labels of first two Macarthur items
> get_labels(get_itemnames(instrument = "mac", number = 1:2), trim = 40)
                       macgmd001                        macgmd002 
"Child walks in a straight line"    "Walks backwards for 5 steps" 
> 
> 
> 
> cleanEx()
> nameEx("get_tau")
> ### * get_tau
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_tau
> ### Title: Obtain difficulty parameters from item bank
> ### Aliases: get_tau
> 
> ### ** Examples
> 
> # difficulty levels in the GHAP lexicon
> get_tau(items = c("ddifmd001", "DDigmd052", "xyz"))
ddifmd001 DDigmd052       xyz 
     5.51        NA        NA 
> 
> 
> 
> cleanEx()
> nameEx("milestones")
> ### * milestones
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: milestones
> ### Title: Outcomes on developmental milestones for preterm-born children
> ### Aliases: milestones
> ### Keywords: datasets
> 
> ### ** Examples
> 
> head(milestones)
   id agedays       age    sex gagebrth ddifmd001 ddicmm029 ddigmd052 ddigmd053
1 111     178 0.4873374   male      203         1         1         1         1
2 111     240 0.6570842   male      203        NA        NA        NA        NA
3 111     431 1.1800137   male      203        NA        NA        NA        NA
4 111     696 1.9055441   male      203        NA        NA        NA        NA
5 177     201 0.5503080 female      180         1         1         1         1
6 177     280 0.7665982 female      180        NA        NA        NA        NA
  ddigmd056 ddicmm030 ddifmd002 ddifmd003 ddifmm004 ddicmm031 ddigmd054
1         1         1         1         1         0         1         1
2        NA        NA        NA         1         1         1         1
3        NA        NA        NA        NA        NA        NA        NA
4        NA        NA        NA        NA        NA        NA        NA
5         1         1         1         1         1         1         1
6        NA        NA        NA         1         1         1         1
  ddigmd057 ddifmd005 ddigmd006 ddigmd055 ddicmd116 ddigmd059 ddigmd058
1         1         0         1         1         1         0         1
2         1         1         1         1         1         1         1
3        NA        NA        NA        NA        NA        NA        NA
4        NA        NA        NA        NA        NA        NA        NA
5         1         0         0         1         1         1         0
6         1         1         1         1         1         1         1
  ddifmd007 ddifmd008 ddifmm009 ddigmm060 ddigmd061 ddigmd062 ddicmm033
1        NA        NA        NA        NA        NA        NA        NA
2         0         0         0         1         1         0         0
3         1         1         1         1         1         1         1
4        NA        NA        NA        NA        NA        NA        NA
5        NA        NA        NA        NA        NA        NA        NA
6         1         0         1         0         1         1         0
  ddigmd063 ddifmd010 ddigmm064 ddigmm065 ddicmm036 ddicmm034 ddifmd011
1        NA        NA        NA        NA        NA        NA        NA
2        NA        NA        NA        NA        NA        NA        NA
3         1         1         1         1         1         1         0
4        NA        NA        NA        NA        NA        NA        NA
5        NA        NA        NA        NA        NA        NA        NA
6        NA        NA        NA        NA        NA        NA        NA
  ddifmm012 ddigmm066 ddigmm067 ddicmd136 ddicmm037 ddifmd013 ddifmm014
1        NA        NA        NA        NA        NA        NA        NA
2        NA        NA        NA        NA        NA        NA        NA
3         1         1         1         1         1        NA        NA
4        NA        NA        NA        NA        NA         1         1
5        NA        NA        NA        NA        NA        NA        NA
6        NA        NA        NA        NA        NA        NA        NA
  ddicmm039 ddicmd141 ddigmd068 ddigmd069 ddifmd015 ddifmm016 ddigmd146
1        NA        NA        NA        NA        NA        NA        NA
2        NA        NA        NA        NA        NA        NA        NA
3        NA        NA        NA        NA        NA        NA        NA
4         1         1         1        NA         1         1         1
5        NA        NA        NA        NA        NA        NA        NA
6        NA        NA        NA        NA        NA        NA        NA
  ddicmm041 ddicmd148 ddigmd070 ddigmd168 ddifmd017 ddifmd018 ddifmm019
1        NA        NA        NA        NA        NA        NA        NA
2        NA        NA        NA        NA        NA        NA        NA
3        NA        NA        NA        NA        NA        NA        NA
4         0         1         1         1         1        NA         1
5        NA        NA        NA        NA        NA        NA        NA
6        NA        NA        NA        NA        NA        NA        NA
  ddifmd154 ddicmm043 ddicmd044 ddigmd071
1        NA        NA        NA        NA
2        NA        NA        NA        NA
3        NA        NA        NA        NA
4        NA        NA         0        NA
5        NA        NA        NA        NA
6        NA        NA        NA        NA
> 
> 
> 
> cleanEx()
> nameEx("normalize")
> ### * normalize
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: normalize
> ### Title: Normalize distribution
> ### Aliases: normalize
> 
> ### ** Examples
> 
> dscore:::normalize(c(5, 10, 5), qp = c(0, 1, 2))
[1] 0.25 0.50 0.25
> 
> sum(dscore:::normalize(rnorm(5), qp = 1:5))
[1] 1
> 
> 
> 
> cleanEx()
> nameEx("rename_gcdg_gsed")
> ### * rename_gcdg_gsed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rename_gcdg_gsed
> ### Title: Rename items from gcdg into gsed lexicon
> ### Aliases: rename_gcdg_gsed
> 
> ### ** Examples
> 
> from <- c(
+   "ag28", "gh2_19", "a14ps4", "b1m157", "mil6",
+   "bm19", "a16fm4", "n22", "ag9", "gh6_5"
+ )
> to <- rename_gcdg_gsed(from, copy = FALSE)
> to
 [1] "aqigmc028" "grihsd219" ""          "by1mdd157" "mdsgmd006" "barxxx019"
 [7] ""          "ddigmm060" "aqigmc009" "grihsd605"
> 
> 
> 
> cleanEx()
> nameEx("sort_itemnames")
> ### * sort_itemnames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sort_itemnames
> ### Title: Sorts item names according to user-specified priority
> ### Aliases: sort_itemnames order_itemnames
> 
> ### ** Examples
> 
> itemnames <- c("aqigmc028", "grihsd219", "", "by1mdd157", "mdsgmd006")
> decompose_itemnames(itemnames)
  instrument domain mode number
1        aqi     gm    c    028
2        gri     hs    d    219
3                              
4        by1     md    d    157
5        mds     gm    d    006
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.546 0.041 0.612 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
