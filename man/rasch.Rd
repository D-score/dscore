% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rasch.R
\name{rasch}
\alias{rasch}
\title{Pairwise Estimation of the Rasch Model under Item Equating}
\usage{
rasch(data, equate = NULL, itemcluster = NULL, b_fixed = NULL,
  b_init = NULL, zerosum = FALSE, count = NULL, conv = 1e-05,
  maxiter = 3000, progress = FALSE)
}
\arguments{
\item{data}{A matrix or a data frame. Item responses should be coded
as `1` (pass) or `0` (fail). Missing responses are allowed and must
be coded as \code{NA}.}

\item{equate}{Optional list with elements corresponding to a character
vector of names of variable to be equated. The default (\code{NULL}) indicates
that no equating takes place.}

\item{itemcluster}{Optional integer vector of itemcluster. Different
integers correspond to different item clusters. The default (\code{NULL})
indicated that no item cluster is set.}

\item{b_fixed}{Numeric, named vector used for fixing item parameters,
whose value are the parameters to be fixed. \code{names(b_fixed)} indicates
the column in the data to which the fixed value applies.}

\item{b_init}{Numeric, named vector of initial item difficulty estimates.
Under the default (\code{NULL}) values initial values are calculated internally.}

\item{zerosum}{Optional logical indicating whether item difficulties
should be centered in each iteration. The default is that no centering
is conducted.}

\item{count}{A table of counts \code{t(data == 0)} times \code{data == 1}. 
Items 
not present in \code{count} are silently discarded from the estimation 
process. The default (\code{NULL}) calculates the count table from the 
data. This will increase execution time substantially if \code{ncol(data)} 
is large, e.g. several hundreds of items.}

\item{conv}{Convergence criterion in maximal absolute parameter change}

\item{maxiter}{Maximal number of iterations}

\item{progress}{A logical which displays the iterative process.
Default is \code{FALSE}.}
}
\value{
Fitted object that extends class \code{c("dRm","Rm","eRm")}
that is defined and understood by the \code{eRm} package. 
See \code{\link[eRm]{RM}} for a description. Note that the 
component \code{X01} is equivalent to \code{X} (the input data), 
and is not returned in order to save space. 
If you need any function from the 
\code{eRm} package that needs \code{X01}, first create it, e.g. by 
\code{fit$X01 <- fit$X}.
The \code{rasch()} function
adds several additional elements, most for compatibility with \code{sirt}.
\describe{
\item{equate}{The \code{equate} argument}
\item{b_fixed}{The \code{b_fixed} argument}
\item{itemcluster}{The \code{itemcluster} argument}
\item{b}{Vector of item difficulties}
\item{item}{Data frame of item parameters (\eqn{N}, \eqn{p} and item
difficulty)}
\item{count}{The count table that is used by the algorithm. May differ 
from the count argument.}
\item{dropped}{Items that were dropped because they were not present in the 
count table (if specified)}
}
}
\description{
This function uses pairwise conditional likelihood estimation for
estimating item parameters in the Rasch model.
}
\details{
This function is based on \code{\link[sirt]{rasch.pairwise.itemcluster}},
additional detail and examples can be found.

The \code{rasch()} function extend the original by incorporating the
\code{equate} argument. This facility allows the users to specify that
Rasch parameters corresponding to different columns should receive
identical values. In addition, some of the arguments have been changed
to a more robust and friendly format (e.g. named vectors).
}
\note{
No standard errors are provided by this function. Use resampling methods
for conducting statistical inference.

Formulas for asymptotic standard errors of this pairwise estimation method are
described in Zwinderman (1995).
}
\examples{
library("sirt")
# Simulate data from the Rasch model
base::set.seed(9765)
N <- 50000    # number of persons
I <- 11       # number of items
b <- base::seq(-2, 2, length = I)
dat <- sirt::sim.raschtype(stats::rnorm(N), b)
base::colnames(dat) <- base::paste0("I", 1:I)

# Do the conventional analysis
fit1 <- rasch(dat)
fit1$item

# split items I6 and I9 into two parts
dat2 <- dat[, -c(6, 9)]
dat2 <- cbind(dat2,
           c(dat[1:(N/2),"I6"], rep(NA, N/2)),
           c(rep(NA, N/2), dat[(N/2+1):N,"I6"]),
           c(dat[1:(N/4),"I9"], rep(NA, 3*N/4)),
           c(rep(NA, N/4), dat[(N/4+1):N,"I9"]))
colnames(dat2)[10:13] <- c("I6a", "I6b","I9a","I9b")

# no equating, parameters close but not identical
fit2 <- rasch(dat2)
fit2$item

# equate I6a and I6b, and I9a and I9b
# parameters identical AND close to conventional analysis
fit3 <- rasch(dat2,
              equate = list(cube = c("I6a", "I6b"), wave = c("I9a", "I9b")))
fit3$item
}
\author{
Alexander Robitzch (\code{sirt} author), Stef van Buuren
}
\references{
van der Linden, W. J., & Eggen, T. J. H. M. (1986).
\emph{An empirical Bayes approach to item banking}. Research Report 86-6,
University of Twente.

Zwinderman, A. H. (1995). Pairwise parameter estimation in Rasch models.
\emph{Applied Psychological Measurement}, \bold{19}, 369-375.
}
\seealso{
\code{\link[sirt]{rasch.pairwise.itemcluster}},
\code{\link[eRm]{RM}}
}

